// 4_함수2 - 인라인 함수 - 32 page

       int add1(int a, int b) { return a + b; }
inline int add2(int a, int b) { return a + b; }


int main()
{
	int n1 = add1(1, 2); // 인자를 약속된 장소에 넣고
						 // 함수로 이동(call add1)

	int n2 = add2(1, 2); // add2 함수의 기계어 코드를 
						// 이 위치에 넣어 달라.(치환해달라)
						// 장점 : 속도가 빠르다.
						// 단점 : 여러번 사용하면 기계어가 여러번 치환 되므로
						//			실행파일 크기가 커질수 있다.(?) 
						
}

// 크기가 작은 함수(1~2줄짜리)는 오히려 실행파일 크기를 줄이는 장점도 있습니다

// 컴파일러는 일반적으로는 "인라인 치환을 적용하지 않습니다."
//						"최적화 옵션이나 인라인 치환 옵션을 적용해야만 적용됩니다"

// visual studio 컴파일러 이름은 "cl" 입니다.
// cl 소스.cpp  /Ob1   => "인라인 적용해달라는 옵션"
//				/O2    => "최적화 해달라는 옵션"

// g++ 소스.cpp -O2 => 최적화!!
//						인라인만 해달라는 옵션이 없습니다. 
//					    
// 그래서 위 소스를 어셈으로 확인할때는 "visual studio 컴파일러"로 보는것이 좋습니다.
// 최적화하면 너무 많이 최적화됩니다.
